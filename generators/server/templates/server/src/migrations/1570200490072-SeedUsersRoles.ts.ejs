import { MigrationInterface, QueryRunner } from 'typeorm';
<%_ if (authenticationType !== 'oauth2') { _%>
import { User } from '../domain/user.entity';
<%_ } _%>
import { Authority } from '../domain/authority.entity';

export class SeedUsersRoles1570200490072 implements MigrationInterface {
  role1: Authority = { name: 'ROLE_ADMIN' };

  role2: Authority = { name: 'ROLE_USER' };

  <%_ if (authenticationType !== 'oauth2') { _%>
  user1: User = {
    login: 'system',
    password: '$2b$10$owBt1eSwkWLUF9bfGqXyI.YR2whTDJz1wIBxbKLzcjg1ubTSnYDrS',
    firstName: 'System',
    lastName: 'System',
    email: 'system@localhost.it',
    imageUrl: '',
    activated: true,
    langKey: 'en',
    createdBy: 'system',
    lastModifiedBy: 'system'
  };

  user2: User = {
    login: 'anonymoususer',
    password: '$2b$10$g7AXdPEqmuVyFI3kdeBczuJM0cwIjRcr3Kv6F3hHnTMxboHREDF52',
    firstName: 'Anonymous',
    lastName: 'User',
    email: 'anonymoususer@localhost.it',
    imageUrl: '',
    activated: true,
    langKey: 'en',
    createdBy: 'system',
    lastModifiedBy: 'system'
  };

  user3: User = {
    login: 'admin',
    password: '$2b$10$bqCFxAFqzSuvCCEs8I27Bu35hCKkfAFXOQexy4X0IUndvSsn8oRKm',
    firstName: 'Administrator',
    lastName: 'Administrator',
    email: 'admin@localhost.it',
    imageUrl: '',
    activated: true,
    langKey: 'en',
    createdBy: 'system',
    lastModifiedBy: 'system'
  };

  user4: User = {
    login: 'user',
    password: '$2b$10$GtEeA4GGMfx4k4Et1Px7N.5gbl2eJTLNR03mdGjlQR3Eh.XF6vGfG',
    firstName: 'User',
    lastName: 'User',
    email: 'user@localhost.it',
    imageUrl: '',
    activated: true,
    langKey: 'en',
    createdBy: 'system',
    lastModifiedBy: 'system'
  };

  <%_ } _%>

  public async up(queryRunner: QueryRunner): Promise<any> {


    const conn = queryRunner.connection;
    await conn
      .createQueryBuilder()
      .insert()
      .into(Authority)
      .values([this.role1, this.role2])
      .execute();

   <%_ if (authenticationType !== 'oauth2') { _%>

    await conn
      .createQueryBuilder()
      .insert()
      .into(User)
      .values([this.user1, this.user2, this.user3, this.user4])
      .execute();

    await conn
      .createQueryBuilder()
      .relation(User, 'authorities')
      .of([this.user1, this.user3])
      .add([this.role1, this.role2]);

    await conn
      .createQueryBuilder()
      .relation(User, 'authorities')
      .of(this.user4)
      .add([this.role2]);
    <%_ } _%>

  }


  // eslint-disable-next-line
  public async down(queryRunner: QueryRunner): Promise<any> { }
}
